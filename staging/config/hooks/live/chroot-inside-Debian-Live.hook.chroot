#!/bin/bash

# Copyright Stamus Networks, 2018
# All rights reserved
# Debian Live/Install ISO script - oss@stamus-networks.com
#
# Please run on Debian Stretch

set -ex

# Setting up the LIVE root (during install on disk it is preseeded)
echo "root:StamusNetworks" | chpasswd

# Enable color output and the "ll" command in shell 
echo " export LS_OPTIONS='--color=auto'" >> /root/.bashrc
echo " alias ll='ls $LS_OPTIONS -l'" >> /root/.bashrc

# Enable apt cache
echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' | tee -a /etc/apt/apt.conf.d/01-custom-local
mkdir -p /binaries/cache/apt/
rsync -a -v --ignore-existing /var/cache/apt /binaries/cache/apt/
mv /var/cache/apt /var/cache/apt.bak
ln -s /binaries/cache/apt /var/cache/apt

# Enable pip cache
mkdir -p /binaries/cache/pip/
mv -f ~/.cache/pip ~/.cache/pip.bak
ln -s /binaries/cache/pip ~/.cache/pip

###  Set up repos ###

wget -qO - http://packages.stamus-networks.com/packages.selks6.stamus-networks.com.gpg.key | apt-key add -
wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | apt-key add -
wget -qO - https://evebox.org/files/GPG-KEY-evebox | apt-key add -

cat >> /etc/apt/sources.list.d/elastic-7.x.list <<EOF
deb https://artifacts.elastic.co/packages/7.x/apt stable main
EOF

cat >> /etc/apt/sources.list.d/curator5.list <<EOF
deb [arch=amd64] https://packages.elastic.co/curator/5/debian9 stable main
EOF

cat >> /etc/apt/sources.list.d/evebox.list <<EOF
deb http://files.evebox.org/evebox/debian stable main
EOF

cat >> /etc/apt/sources.list.d/selks6.list <<EOF
# SELKS 5 Stamus Networks repos
#
# Manual changes here can be overwritten during 
# SELKS updates and upgrades !!

deb http://packages.stamus-networks.com/selks6/debian/ buster main
deb http://packages.stamus-networks.com/selks6/debian-kernel/ buster main
deb http://packages.stamus-networks.com/selks6/debian-test/ buster main
EOF

###  END Set up repos ###

mkdir -p  /opt/selks/

cp -R /binaries/selks /
#cd /binaries/plugins
#sh make.sh all
#cd /

### START JAVA for ELK ###

apt-get update && \
apt-get install -y ca-certificates-java openjdk-11-jre-headless \
openjdk-11-jdk openjdk-11-jre openjdk-11-jre-headless

### END JAVA for ELK ###

### START ELK ###

#apt-get update
yes | apt-get install -y elasticsearch logstash kibana elasticsearch-curator

mkdir -p /var/cache/logstash/sincedbs/
chown logstash:logstash /var/cache/logstash/sincedbs/
/usr/share/logstash/bin/logstash-plugin install logstash-filter-geoip

/bin/systemctl enable elasticsearch && \
/bin/systemctl enable logstash && \
/bin/systemctl enable kibana && \
/bin/systemctl daemon-reload

### END ELK ###

### START Suricata ###

apt remove --purge rustc
apt-get install curl
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y
source $HOME/.cargo/env
cargo install --force cbindgen

#apt-get update && \
apt-get install -y libpcre3 libpcre3-dbg libpcre3-dev build-essential libpcap-dev   \
                libnet1-dev libyaml-0-2 libyaml-dev pkg-config zlib1g zlib1g-dev \
                libcap-ng-dev libcap-ng0 make libmagic-dev         \
                libnss3-dev libgeoip-dev liblua5.1-dev libhiredis-dev libevent-dev \
                python-yaml
apt-get install -y libnetfilter-queue-dev libnetfilter-queue1 libnetfilter-log-dev libnetfilter-log1 libnfnetlink-dev libnfnetlink0
apt-get install -y python3-pip
pip3 install --upgrade suricata-update
whereis suricata-update
ln -s /usr/local/bin/suricata-update /usr/bin/suricata-update
apt-get -y install libtcmalloc-minimal4 libjansson-dev

apt-get install -y -o Dpkg::Options::="--force-confdef" suricata

apt-get install -y flow-tools
#make sure Suricata can write in /cic/dataset/nsm
mkdir -p /cic/dataset/nsm/
chown logstash -R /cic/dataset/nsm/

apt-get install -y nftables
systemctl enable nftables.service

### END Suricata ###


### START Install kibana dashboards ###

apt-get install -y kibana-dashboards-stamus

### END Install kibana dashboards ###

### START Evebox ###

#apt-get update && \
apt-get install -y evebox
/bin/systemctl enable evebox

### END Evebox ###

### START Install Scirius ###
apt-get install python3-pip -y
#wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz
#tar xzf Python-3.8.2.tgz
#cd Python-3.8.2
#./configure --enable-optimizations
#make altinstall
#python3.8 --version
#update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.8 1

python3 -m pip install --upgrade pip

#install PostgresSQL
apt-get -y install postgresql-11 postgresql-client-11
apt-get -y build-dep python-psycopg2
pip install psycopg2-binary

# fix conflict port 5432 when build env having service running on 5432
sed -i -E "s/port = .*\# \(change requires restart\)/port = 5432 \# \(change requires restart\)/g" /etc/postgresql/11/main/postgresql.conf
# fix to pre-setup db
sed -i "s/host    all             all             127.0.0.1\/32            md5/host    all             all             0.0.0.0\/0            md5/g" /etc/postgresql/11/main/pg_hba.conf
pg_ctlcluster 11 main start

sudo -u postgres psql -h /var/run/postgresql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
sudo -u postgres psql -h /var/run/postgresql -c "DROP SCHEMA public CASCADE;"
sudo -u postgres psql -h /var/run/postgresql -c "CREATE SCHEMA public;"
sudo -u postgres psql -h /var/run/postgresql -c "GRANT ALL ON SCHEMA public TO postgres;"
sudo -u postgres psql -h /var/run/postgresql -c "GRANT ALL ON SCHEMA public TO public;"

cp -R /binaries/scirius /
ln -s /selks/staging/usr/local/opnsense/scripts/ml /scirius/ml
mkdir -p /binaries/cache/npm/scirius/node_modules
mkdir -p /binaries/cache/npm/scirius/hunt/node_modules
ln -s /binaries/cache/npm/scirius/node_modules /scirius/node_modules
ln -s /binaries/cache/npm/scirius/hunt/node_modules /scirius/hunt/node_modules

cat >> /scirius/scirius/settings.py <<EOF
INSTALLED_APPS += ('ml',)
EOF

cat > /scirius/setup.py <<EOF
import subprocess
import os
from setuptools import setup

with open(os.path.join(os.path.dirname(__file__), 'README.rst')) as readme:
    README = readme.read()

# allow setup.py to be run from any path
os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))

print('====> Setting up...')
setup(
    name='scirius',
    version='3.8.0',
    packages=['scirius','rules','suricata', 'accounts', 'viz', 'ml'],
    scripts=['manage.py'],
    include_package_data=True,
    description='A web interface to manage Suricata rulesets',
    long_description=README,
    url='https://www.stamus-networks.com/open-source/#scirius',
    author='Eric Leblond',
    author_email='eleblond@stamus-networks.com',
    classifiers=[
        'Environment :: Web Environment',
        'Framework :: Django',
        'Intended Audience :: System Administrators',
        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3.7',
        'Topic :: Internet :: WWW/HTTP',
        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
    ],
)

# setup supervisor service
cmd = '''
    mkdir -p /usr/share/python3/scirius
    cp -R ./usr/share/python3/scirius/bin /usr/share/python3/scirius
    cp ./usr/share/python3/scirius/bin/* /usr/bin
    cp ./usr/share/python3/scirius/requirements.txt /usr/share/python3/scirius
    cp ./usr/share/python3/scirius/get-pip.py /usr/share/python3/scirius
    cd /usr/share/python3/scirius
    #. bin/activate
    #python3 get-pip.py
    #python3 -m pip install -r requirements.txt
    #deactivate
    cd -

    mkdir -p /usr/share/doc
    cp -R ./usr/share/doc/scirius /usr/share/doc

    mkdir -p /usr/share/python3/scirius/lib
    ln -sf /usr/lib/python3.7 /usr/share/python3/scirius/lib/python3.7

    ln -sf /etc/scirius/local_settings.py scirius/local_settings.py
    if [ -e /usr/share/python3/scirius/lib/python3.7/site-packages/scirius-3.8.0-py3.7.egg/scirius/ ]; then
        ln -sf /etc/scirius/local_settings.py /usr/share/python3/scirius/lib/python3.7/site-packages/scirius-3.8.0-py3.7.egg/scirius/local_settings.py
    fi
    if [ -e /usr/local/lib/python3.7/dist-packages/scirius-3.8.0-py3.7.egg/scirius/ ]; then
        ln -sf /etc/scirius/local_settings.py /usr/local/lib/python3.7/dist-packages/scirius-3.8.0-py3.7.egg/scirius/local_settings.py
    fi
'''
print('====> Setting up supervisor...')
exit_status = subprocess.call(cmd, shell=True)

EOF

cd /scirius
#python3 setup.py install
apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev
python3 -m pip install -r requirements.txt

#python3 -m pip install gitpython==0.3.1-beta2
python3 -m pip install gitdb
apt-get install -y npm
npm install -g npm@5.6.0
npm -v
sudo npm install > npm.install.log

cd hunt
#npm uninstall -g npm
sudo npm install node-sass-chokidar@^1.3.4
npm install > npm.install.log
npm run build
cd ..

#npm install -g npm@latest
npm install -g webpack@3.11
#npm uninstall -g npm
sudo npm install > npm.install.log

mkdir -p /var/lib/scirius/static/
#apt-get update && \
#yes | apt-get install -y scirius
python3 setup.py install > install.log

webpack > webpack.log
mkdir -p /var/log/scirius/
cat > /var/log/scirius/elasticsearch.log <<EOF
EOF
#fix error migrate scirius db timezone
python3 -m pip install psycopg2==2.8.6
python3 manage.py migrate
python3 manage.py createcachetable
python3 manage.py collectstatic --noinput

#mv /var/lib/scirius/static/ /var/lib/scirius/static.bak
#cp -R static /var/lib/scirius/
#mkdir -p /etc/scirius
#cp /scirius/scirius/local_settings.py /etc/scirius/

chown -R www-data:www-data /var/lib/scirius/static
chown -R www-data:www-data /var/log/scirius/elasticsearch.log
### END Scirius ###

### START Install php ###
apt-get install apt php-dev php-fpm php php-cgi -y
yes | apt-get install lighttpd -y

apt-get install -y libpcre3-dev curl php-pear libcurl3-openssl-dev php-dev php-phpseclib \
php-sqlite3 php-json php-xml php-sockets php-radius php-ldap php-gettext php-dom php-curl php-ctype

apt-get install -y locales locales-all

git clone https://github.com/jbboehr/php-psr.git
cd php-psr
phpize
./configure
make -j `getconf _NPROCESSORS_ONLN`
make -j `getconf _NPROCESSORS_ONLN` install
cd -

pecl channel-update pecl.php.net
#pecl install phalcon

#pip3 install jinja2 netaddr ujson
python3 -m pip install jinja2 netaddr ujson configparser
apt-get install syslog-ng clog unbound resolvconf isc-dhcp-server radvd rrdtool vsftpd sendmail csh mtree-netbsd -y

cat > /etc/resolv.conf <<EOF
domain localdomain
nameserver 127.0.0.1
nameserver 203.162.4.190
nameserver 8.8.8.8

EOF

### END Install php ###

### START Install zfs ###
apt-get update
apt-get install git build-essential fakeroot libncurses5-dev libssl-dev ccache -y
apt-get install build-essential autoconf libtool gawk alien fakeroot linux-headers-$(uname -r) -y
apt-get install zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libdevmapper-dev -y
apt-get install parted lsscsi ksh -y
apt-get install automake=1:1.16.1-4 -y
apt-get install spl -y
apt-get install zfs-dkms -y
apt-get install zfsutils-linux -y
/sbin/modprobe zfs
apt-get -f install
apt-get install zfs-zed -y
### END Install zfs ###

### START Install daemonize ###
apt-get install daemonize -y
### END Install daemonize ###

### START Install vpn ###
apt-get install openvpn -y
### END Install vpn ###

### START Install Caching proxy ###
#apt-get install squid -y
apt-get install -y libecap3-dev libgnutls28-dev libpam0g-dev libkrb5-dev libtdb-dev libpmempool-dev
cd /binaries/squid
sh bootstrap.sh
./configure --build=x86_64-linux-gnu \
 --prefix=/usr \
 --includedir=${prefix}/include \
 --mandir=${prefix}/share/man \
 --infodir=${prefix}/share/info \
 --sysconfdir=/etc \
 --localstatedir=/var \
 --libexecdir=${prefix}/lib/squid \
 --srcdir=. \
 --disable-maintainer-mode \
 --disable-dependency-tracking \
 --disable-silent-rules \
 --with-build-environment=default \
 --enable-build-info='Debian linux' \
 --datadir=/usr/share/squid \
 --sysconfdir=/etc/squid \
 --libexecdir=/usr/lib/squid \
 --mandir=/usr/share/man \
 --enable-inline \
 --disable-arch-native \
 --enable-async-io=8 \
 --enable-storeio=ufs,aufs,diskd,rock \
 --enable-removal-policies=lru,heap \
 --enable-delay-pools \
 --enable-cache-digests \
 --enable-icap-client \
 --enable-follow-x-forwarded-for \
 --enable-auth-basic=DB,fake,getpwnam,LDAP,NCSA,NIS,PAM,POP3,RADIUS,SASL,SMB \
 --enable-auth-digest=file,LDAP \
 --enable-auth-negotiate=kerberos,wrapper \
 --enable-auth-ntlm=fake,SMB_LM \
 --enable-external-acl-helpers=file_userip,kerberos_ldap_group,LDAP_group,session,SQL_session,time_quota,unix_group,wbinfo_group \
 --enable-security-cert-validators=fake \
 --enable-storeid-rewrite-helpers=file \
 --enable-url-rewrite-helpers=fake \
 --enable-eui \
 --enable-esi \
 --enable-icmp \
 --enable-zph-qos \
 --enable-ecap \
 --disable-translation \
 --with-swapdir=/var/spool/squid \
 --with-logdir=/var/log/squid \
 --with-pidfile=/var/run/squid.pid \
 --with-filedescriptors=65536 \
 --with-large-files \
 --with-default-user=proxy \
 --with-gnutls \
 --enable-ssl \
 --with-openssl \
 --enable-security-cert-generators=file \
 --enable-ssl-crtd \
 --enable-linux-netfilter \
 build_alias=x86_64-linux-gnu \
 CC=x86_64-linux-gnu-gcc \
 CFLAGS='-g -O2 -fdebug-prefix-map=/build/squid-SXQquB/squid-4.6=. -fstack-protector-strong -Wformat -Werror=format-security -Wall' \
 LDFLAGS=-'Wl,-z,relro -Wl,-z,now -Wl,--as-needed -latomic' \
 CPPFLAGS='-Wdate-time -D_FORTIFY_SOURCE=2' \
 CXX=x86_64-linux-gnu-g++ \
 CXXFLAGS='-g -O2 -fdebug-prefix-map=/build/squid-SXQquB/squid-4.6=. -fstack-protector-strong -Wformat -Werror=format-security' \
 BUILDCXXFLAGS='-g -O2 -fdebug-prefix-map=/build/squid-SXQquB/squid-4.6=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -latomic' \
 BUILDCXX=x86_64-linux-gnu-g++ \
 LIBOPENSSL_CFLAGS=-I/usr/include \
 LIBOPENSSL_LIBS='-lcrypto -lssl'

#./configure --with-default-user=squid \
# --bindir=/usr/local/sbin \
# --sbindir=/usr/local/sbin \
# --datadir=/usr/local/etc/squid \
# --libexecdir=/usr/local/libexec/squid \
# --localstatedir=/var \
# --sysconfdir=/usr/local/etc/squid \
# --with-logdir=/var/log/squid \
# --with-pidfile=/var/run/squid.pid \
# --with-swapdir=/var/squid/cache \
# --without-gnutls \
# --with-included-ltdl \
# --enable-auth \
# --enable-zph-qos \
# --enable-build-info \
# --enable-loadable-modules \
# --enable-removal-policies=lru heap \
# --disable-epoll \
# --disable-linux-tproxy \
# --disable-translation \
# --disable-arch-native \
# --disable-strict-error-checking \
# --enable-eui \
# --enable-cache-digests \
# --enable-delay-pools \
# --disable-ecap \
# --disable-esi \
# --enable-follow-x-forwarded-for \
# --with-mit-krb5=/usr/local \
# --enable-htcp \
# --enable-icap-client \
# --enable-icmp \
# --enable-ident-lookups \
# --enable-ipv6 \
# --enable-kqueue \
# --with-large-files \
# --enable-http-violations \
# --without-nettle \
# --enable-snmp \
# --enable-ssl \
# --with-openssl=/usr/local \
# --enable-security-cert-generators=file \
# --enable-ssl-crtd \
# --disable-stacktraces \
# --disable-ipf-transparent \
# --disable-ipfw-transparent \
# --with-nat-devpf \
# --enable-forw-via-db \
# --enable-wccp \
# --enable-wccpv2 \
# --enable-auth-basic=LDAP SASL DB SMB_LM NCSA PAM POP3 RADIUS fake getpwnam \
# --enable-auth-digest=eDirectory LDAP file \
# --enable-external-acl-helpers=LDAP_group eDirectory_userip file_userip unix_group delayer kerberos_ldap_group \
# --enable-auth-negotiate=kerberos wrapper \
# --enable-auth-ntlm=fake SMB_LM \
# --enable-storeio=aufs diskd rock ufs \
# --enable-disk-io=DiskThreads DiskDaemon AIO Blocking IpcIo Mmapped \
# --enable-log-daemon-helpers=file DB \
# --enable-url-rewrite-helpers=fake LFS \
# --enable-storeid-rewrite-helpers=file \
# --enable-security-cert-validators=fake \
# --prefix=/usr \
# --includedir=${prefix}/include \
# --mandir=/usr/local/man \
# --disable-silent-rules \
# --infodir=/usr/local/share/info/ \
# --build=x86_64-linux-gnu \
# --enable-ltdl-convenience
# --enable-pf-transparent \
# --disable-linux-netfilter \
# build_alias=amd64-portbld-freebsd12.1 \
# CC=cc \
# CPPFLAGS=-I/usr/local/include -I/usr/local/include \
# CXX=c++ \
# CXXFLAGS=-O2 -pipe -DHARDENEDBSD -I/usr/local/include -I/usr/local/include -fPIE -fPIC -fsanitize=safe-stack -fstack-protector-all -DLDAP_DEPRECATED -fno-strict-aliasing  -DHARDENEDBSD -fPIE -fPIC -fsanitize=safe-stack  \
# CPP=cpp \
# CFLAGS=-I/usr/local/include -O2 -pipe  -DHARDENEDBSD -I/usr/local/include -I/usr/local/include -fPIE -fPIC -fsanitize=safe-stack -fstack-protector-all -DLDAP_DEPRECATED -fno-strict-aliasing  \
# LDFLAGS=-L/usr/local/lib  -L/usr/local/lib -L/usr/local/lib -pthread -L/usr/local/lib -lpcreposix -lpcre -Wl,-rpath,/usr/local/lib:/usr/lib -pie -Wl,-z,relro -Wl,-z,now -fsanitize=safe-stack -Wl,-rpath,/usr/local/lib -fstack-protector-all  \
# LIBS=-lkrb5 -lgssapi_krb5  \
# KRB5CONFIG=/usr/local/bin/krb5-config \
# krb5_config=/usr/local/bin/krb5-config \
# LIBOPENSSL_CFLAGS=-I/usr/local/include \
# LIBOPENSSL_LIBS=-lcrypto -lssl \

make -j `getconf _NPROCESSORS_ONLN` all
make -j `getconf _NPROCESSORS_ONLN` install

apt-get install -y clamav clamav-daemon
cd /binaries/c-icap
#autoconf
./configure --prefix=/usr/local/c-icap --enable-large-files
make -j `getconf _NPROCESSORS_ONLN`
make -j `getconf _NPROCESSORS_ONLN` install

apt-get install -y libicapapi-dev
cd /binaries/c-icap-modules
#libtoolize --force
#aclocal # Set up an m4 environment
#autoheader
#automake --force-missing --add-missing # Generate Makefile.in from Makefile.am
#autoconf # Generate configure from configure.ac
#./configure # Generate Makefile from Makefile.in
#make distcheck # Use Makefile to build and test a tarball to distribute
#./configure 'CFLAGS=-O3 -m64 -pipe' 'CPPFLAGS=-I/usr/local/clamav/include' 'LDFLAGS=-L/usr/local/lib -L/usr/local/clamav/lib/'
#./configure --with-c-icap=/usr/local/c-icap --prefix=/usr/local/c-icap
./configure --prefix=/usr/local --with-clamav=/etc/clamav --with-c-icap=/usr/local/c-icap
make -j `getconf _NPROCESSORS_ONLN`
make -j `getconf _NPROCESSORS_ONLN` install-strip

cp -R /binaries/squidclamav /squidclamav
cd /squidclamav
git clean -df
git checkout -- .
sh bootstrap.sh
./configure --prefix=/usr/local/squidclamav --with-c-icap=/usr/local/c-icap
#make -j $(($(grep ^cpu\ cores /proc/cpuinfo | uniq | sed s/[^0-9]//g)+1))
automake --version
make -j `getconf _NPROCESSORS_ONLN`
ls -la .
ls -la .libs || true
make -j `getconf _NPROCESSORS_ONLN` install

### END Install Caching proxy ###

### START lighttpd opnsense ###
cat > /etc/lighttpd/lighttpd.conf <<EOF

var.log_root    = "/var/log/lighttpd"
var.server_root = "/usr/local/www"
var.state_dir   = "/var/run"
var.home_dir    = "/var/run/lighttpd"
var.conf_dir    = "/usr/local/etc/lighttpd"
var.vhosts_dir  = server_root + "/vhosts"
var.cache_dir   = "/var/cache/lighttpd"
var.socket_dir  = home_dir + "/sockets"

include "modules.conf"

server.port = 81
#server.use-ipv6 = "enable"
server.username  = "www-data"
server.groupname = "www-data"
server.document-root = "/usr/local/www"
server.pid-file = state_dir + "/lighttpd.pid"
server.errorlog = log_root + "/error.log"

include "conf.d/access_log.conf"
include "conf.d/debug.conf"
#server.event-handler = "freebsd-kqueue"
server.network-backend = "writev"
server.max-fds = 2048
server.stat-cache-engine = "simple"
server.max-connections = 1024
index-file.names += (
  "index.xhtml", "index.html", "index.htm", "default.htm", "index.php"
)

url.access-deny             = ( "~", ".inc" )

\$HTTP["url"] =~ "\.pdf$" {
  server.range-requests = "disable"
}

static-file.exclude-extensions = ( ".php", ".pl", ".fcgi", ".scgi" )
include "conf.d/mime.conf"
include "conf.d/dirlisting.conf"
server.follow-symlink = "enable"
server.upload-dirs = ( "/var/tmp" )

include "/etc/lighttpd/conf-enabled/*.conf"
#======
#include_shell "/usr/share/lighttpd/use-ipv6.pl " + server.port
#include_shell "/usr/share/lighttpd/create-mime.assign.pl"
#include_shell "/usr/share/lighttpd/include-conf-enabled.pl"

EOF

cat > /etc/php/7.3/cli/php.conf <<EOF

PHP_VER=73
PHP_VERSION=7.3.20
PHP_SAPI=cli cgi fpm embed
PHP_EXT_INC=pcre spl
PHP_EXT_DIR=20180731

EOF

cat > /etc/php/7.3/cgi/php.conf <<EOF

PHP_VER=73
PHP_VERSION=7.3.20
PHP_SAPI=cli cgi fpm embed
PHP_EXT_INC=pcre spl
PHP_EXT_DIR=20180731

EOF

cat > /etc/php/7.3/fpm/php.conf <<EOF

PHP_VER=73
PHP_VERSION=7.3.20
PHP_SAPI=cli cgi fpm embed
PHP_EXT_INC=pcre spl
PHP_EXT_DIR=20180731

EOF

cat > /etc/php/7.3/cli/php.ini <<EOF

; File generated via configd
output_buffering = "0"
expose_php = Off
implicit_flush = true
magic_quotes_gpc = Off
max_execution_time = 900
max_input_time = 1800
max_input_vars = 5000
memory_limit = 512M
register_argc_argv = On
register_long_arrays = Off
variables_order = "GPCS"
file_uploads = On
upload_tmp_dir = /tmp
upload_max_filesize = 200M
post_max_size = 200M
html_errors = Off
zlib.output_compression = Off
zlib.output_compression_level = 1
include_path = ".:/usr/share/php:/usr/local/etc/inc:/usr/local/www:/usr/local/opnsense/mvc:/usr/local/opnsense/contrib:/usr/local/share/pear:/usr/local/share:/usr/share/php"
ignore_repeated_errors = on
error_reporting = E_ALL ^ (E_NOTICE | E_DEPRECATED | E_STRICT)
display_errors=on
log_errors=on
error_log=/tmp/PHP_errors.log
date.timezone="Etc/UTC"
session.save_path=/var/lib/php/sessions
pcre.jit=0

EOF

cat > /etc/php/7.3/cgi/php.ini <<EOF

; File generated via configd
output_buffering = "0"
expose_php = Off
implicit_flush = true
magic_quotes_gpc = Off
max_execution_time = 900
max_input_time = 1800
max_input_vars = 5000
memory_limit = 512M
register_argc_argv = On
register_long_arrays = Off
variables_order = "GPCS"
file_uploads = On
upload_tmp_dir = /tmp
upload_max_filesize = 200M
post_max_size = 200M
html_errors = Off
zlib.output_compression = Off
zlib.output_compression_level = 1
include_path = ".:/usr/share/php:/usr/local/etc/inc:/usr/local/www:/usr/local/opnsense/mvc:/usr/local/opnsense/contrib:/usr/local/share/pear:/usr/local/share:/usr/share/php"
ignore_repeated_errors = on
error_reporting = E_ALL ^ (E_NOTICE | E_DEPRECATED | E_STRICT)
display_errors=on
log_errors=on
error_log=/tmp/PHP_errors.log
date.timezone="Etc/UTC"
session.save_path=/var/lib/php/sessions
pcre.jit=0

EOF

cat > /etc/php/7.3/fpm/php.ini <<EOF

; File generated via configd
output_buffering = "0"
expose_php = Off
implicit_flush = true
magic_quotes_gpc = Off
max_execution_time = 900
max_input_time = 1800
max_input_vars = 5000
memory_limit = 512M
register_argc_argv = On
register_long_arrays = Off
variables_order = "GPCS"
file_uploads = On
upload_tmp_dir = /tmp
upload_max_filesize = 200M
post_max_size = 200M
html_errors = Off
zlib.output_compression = Off
zlib.output_compression_level = 1
include_path = ".:/usr/share/php:/usr/local/etc/inc:/usr/local/www:/usr/local/opnsense/mvc:/usr/local/opnsense/contrib:/usr/local/share/pear:/usr/local/share:/usr/share/php"
ignore_repeated_errors = on
error_reporting = E_ALL ^ (E_NOTICE | E_DEPRECATED | E_STRICT)
display_errors=on
log_errors=on
error_log=/tmp/PHP_errors.log
date.timezone="Etc/UTC"
session.save_path=/var/lib/php/sessions
pcre.jit=0

EOF

cat > /etc/php/7.3/mods-available/psr.ini <<EOF
extension=psr.so
EOF

cat > /etc/php/7.3/mods-available/phalcon.ini <<EOF
extension=phalcon.so
EOF

ln -s /etc/php/7.3/mods-available/psr.ini /etc/php/7.3/cli/conf.d/20-psr.ini
ln -s /etc/php/7.3/mods-available/psr.ini /etc/php/7.3/cgi/conf.d/20-psr.ini
ln -s /etc/php/7.3/mods-available/phalcon.ini /etc/php/7.3/cli/conf.d/30-phalcon.ini
ln -s /etc/php/7.3/mods-available/phalcon.ini /etc/php/7.3/cgi/conf.d/30-phalcon.ini

#lighttpd-enable-mod fastcgi fastcgi-php
#service lighttpd force-reload

### END lighttpd opnsense ###

### START dhcp ###

cat > /etc/dhcp/dhcpd.conf <<EOF
# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
option domain-name "example.org";
option domain-name-servers ns1.example.org, ns2.example.org;

default-lease-time 600;
max-lease-time 7200;

# Use this to enble / disable dynamic dns updates globally.
#ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the
# DHCP server to understand the network topology.

subnet 10.152.187.0 netmask 255.255.255.0 {
}

# This is a very basic subnet declaration.

subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

subnet 10.254.239.32 netmask 255.255.255.224 {
  range dynamic-bootp 10.254.239.40 10.254.239.60;
  option broadcast-address 10.254.239.31;
  option routers rtr-239-32-1.example.org;
}

# A slightly different configuration for an internal subnet.
subnet 10.5.5.0 netmask 255.255.255.224 {
  range 10.5.5.26 10.5.5.30;
  option domain-name-servers ns1.internal.example.org;
  option domain-name "internal.example.org";
  option routers 10.5.5.1;
  option broadcast-address 10.5.5.31;
  default-lease-time 600;
  max-lease-time 7200;
}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

host passacaglia {
  hardware ethernet 0:0:c0:5d:bd:95;
  filename "vmunix.passacaglia";
  server-name "toccata.example.com";
}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
host fantasia {
  hardware ethernet 08:00:07:26:c0:a5;
  fixed-address fantasia.example.com;
}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

class "foo" {
  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
}

shared-network 224-29 {
  subnet 10.17.224.0 netmask 255.255.255.0 {
    option routers rtr-224.example.org;
  }
  subnet 10.0.29.0 netmask 255.255.255.0 {
    option routers rtr-29.example.org;
  }
  pool {
    allow members of "foo";
    range 10.17.224.10 10.17.224.250;
  }
  pool {
    deny members of "foo";
    range 10.0.29.10 10.0.29.230;
  }
}
EOF

cat > /etc/dhcp/dhcpd6.conf <<EOF
# Server configuration file example for DHCPv6
# From the file used for TAHI tests - addresses chosen
# to match TAHI rather than example block.

# IPv6 address valid lifetime
#  (at the end the address is no longer usable by the client)
#  (set to 30 days, the usual IPv6 default)
default-lease-time 2592000;

# IPv6 address preferred lifetime
#  (at the end the address is deprecated, i.e., the client should use
#   other addresses for new connections)
#  (set to 7 days, the	usual IPv6 default)
preferred-lifetime 604800;

# T1, the delay before Renew
#  (default is 1/2 preferred lifetime)
#  (set to 1 hour)
option dhcp-renewal-time 3600;

# T2, the delay before Rebind (if Renews failed)
#  (default is 3/4 preferred lifetime)
#  (set to 2 hours)
option dhcp-rebinding-time 7200;

# Enable RFC 5007 support (same than for DHCPv4)
allow leasequery;

# Global definitions for name server address(es) and domain search list
option dhcp6.name-servers 3ffe:501:ffff:100:200:ff:fe00:3f3e;
option dhcp6.domain-search "test.example.com","example.com";

# Set preference to 255 (maximum) in order to avoid waiting for
# additional servers when there is only one
##option dhcp6.preference 255;

# Server side command to enable rapid-commit (2 packet exchange)
##option dhcp6.rapid-commit;

# The delay before information-request refresh
#  (minimum is 10 minutes, maximum one day, default is to not refresh)
#  (set to 6 hours)
option dhcp6.info-refresh-time 21600;

# The path of the lease file
dhcpv6-lease-file-name "/var/db/dhcpd6.leases";

# Static definition (must be global)
host myclient {
	# The entry is looked up by this
	host-identifier option
		dhcp6.client-id 00:01:00:01:00:04:93:e0:00:00:00:00:a2:a2;

	# A fixed address
	fixed-address6 3ffe:501:ffff:100::1234;

	# A fixed prefix
	fixed-prefix6 3ffe:501:ffff:101::/64;

	# Override of the global definitions,
	# works only when a resource (address or prefix) is assigned
	option dhcp6.name-servers 3ffe:501:ffff:100:200:ff:fe00:4f4e;

	# For debug (to see when the entry statements are executed)
	#  (log "sol" when a matching Solicitation is received)
	##if packet(0,1) = 1 { log(debug,"sol"); }
}

host otherclient {
        # This host entry is hopefully matched if the client supplies a DUID-LL
        # or DUID-LLT containing this MAC address.
        hardware ethernet 01:00:80:a2:55:67;

        fixed-address6 3ffe:501:ffff:100::4321;
}

# The subnet where the server is attached
#  (i.e., the server has an address in this subnet)
subnet6 3ffe:501:ffff:100::/64 {
	# Two addresses available to clients
	#  (the third client should get NoAddrsAvail)
	range6 3ffe:501:ffff:100::10 3ffe:501:ffff:100::11;

	# Use the whole /64 prefix for temporary addresses
	#  (i.e., direct application of RFC 4941)
	range6 3ffe:501:ffff:100:: temporary;

	# Some /64 prefixes available for Prefix Delegation (RFC 3633)
	prefix6 3ffe:501:ffff:100:: 3ffe:501:ffff:111:: /64;
}

# A second subnet behind a relay agent
subnet6 3ffe:501:ffff:101::/64 {
	range6 3ffe:501:ffff:101::10 3ffe:501:ffff:101::11;

	# Override of the global definitions,
	# works only when a resource (address or prefix) is assigned
	option dhcp6.name-servers 3ffe:501:ffff:101:200:ff:fe00:3f3e;

}

# A third subnet behind a relay agent chain
subnet6 3ffe:501:ffff:102::/64 {
	range6 3ffe:501:ffff:102::10 3ffe:501:ffff:102::11;
}
EOF

cat > /etc/default/isc-dhcp-server <<EOF
INTERFACESv4="enp2s0"
INTERFACESv6="enp2s0"
EOF

### END dhcp ###

### START Scirius, nginx, revrse proxy, supervisor and ssl ###

sed -i 's/ELASTICSEARCH_VERSION = 5/ELASTICSEARCH_VERSION = 7/g' /etc/scirius/local_settings.py
sed -i 's/KIBANA_VERSION=4/KIBANA_VERSION = 7/g' /etc/scirius/local_settings.py
sed -i 's/KIBANA_INDEX = "kibana-int"/KIBANA_INDEX = ".kibana"/g' /etc/scirius/local_settings.py
sed -i 's/KIBANA_DASHBOARDS_PATH = "\/opt\/selks\/kibana5-dashboards\/"/KIBANA7_DASHBOARDS_PATH = "\/opt\/selks\/kibana7-dashboards\/"/g' /etc/scirius/local_settings.py
echo "ELASTICSEARCH_KEYWORD = \"keyword\"" >> /etc/scirius/local_settings.py
echo "USE_MOLOCH = True" >> /etc/scirius/local_settings.py
echo "MOLOCH_URL = \"http://localhost:8005\"" >> /etc/scirius/local_settings.py

cd /

### overwite suricata of scirius
cat > /etc/suricata/selks6-addin.yaml <<EOF
EOF

cd /binaries/suricata
#curl -L https://github.com/OISF/suricata-update/archive/master.tar.gz | tar zxvf - --strip-components=1
sh autogen.sh
./configure --enable-nfqueue --sysconfdir=/etc --localstatedir=/var --prefix=/usr/ --enable-lua --enable-rust --enable-rules #--enable-suricata-update
make -j `getconf _NPROCESSORS_ONLN`
make -j `getconf _NPROCESSORS_ONLN` install-full

#fix symbol lookup error: /usr/bin/suricata: undefined symbol: htp_config_set_lzma_layers
ldconfig /usr/local/lib
ldconfig /usr/lib

suricata --build-info
ldd /usr/bin/suricata
cd -
### end overwite suricata of scirius

apt-get install -y supervisor
# supervisor conf
mkdir -p /etc/supervisor/conf.d/
#ln -s /usr/share/doc/scirius/examples/scirius-supervisor.conf /etc/supervisor/conf.d/scirius-supervisor.conf
ln -s /selks/staging/etc/supervisor/conf.d/scirius-supervisor.conf /etc/supervisor/conf.d/scirius-supervisor.conf

# Set the right permissions for the logstash user to run suricata
chown -R logstash:logstash /var/log/suricata

# www-data needs to write Suricata rules
chown -R www-data.www-data /etc/suricata/rules/

mkdir -p /etc/nginx/ssl
openssl req -new -nodes -x509 -subj "/C=FR/ST=IDF/L=Paris/O=Stamus/CN=SELKS" -days 3650 -keyout /etc/nginx/ssl/scirius.key -out /etc/nginx/ssl/scirius.crt -extensions v3_ca 

rm -rf /etc/nginx/sites-enabled/default

cat >> /etc/nginx/sites-available/selks6.conf <<EOF
server {
    listen 127.0.0.1:80;
    listen 127.0.1.1:80;
    listen 443 default_server ssl;
    ssl_certificate /etc/nginx/ssl/scirius.crt;
    ssl_certificate_key /etc/nginx/ssl/scirius.key;
    server_name SELKS;
    access_log /var/log/nginx/scirius.access.log;
    error_log /var/log/nginx/scirius.error.log;

    # https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production
    location /static/ { # STATIC_URL
        alias /var/lib/scirius/static/; # STATIC_ROOT
        expires 30d;
    }

    location /media/ { # MEDIA_URL
        alias /var/lib/scirius/static/; # MEDIA_ROOT
        expires 30d;
    }

    location /app/moloch/ {
        proxy_pass https://127.0.0.1:8005;
        proxy_redirect off;
    }

    location /plugins/ {
        proxy_pass http://127.0.0.1:5601/plugins/;
        proxy_redirect off;
    }

    location /dlls/ {
        proxy_pass http://127.0.0.1:5601/dlls/;
        proxy_redirect off;
    }

    location /socket.io/ {
        proxy_pass http://127.0.0.1:5601/socket.io/;
        proxy_redirect off;
    }

    location /dataset/ {
        proxy_pass http://127.0.0.1:5601/dataset/;
        proxy_redirect off;
    }

    location /translations/ {
        proxy_pass http://127.0.0.1:5601/translations/;
        proxy_redirect off;
    }

    location ^~ /built_assets/ {
        proxy_pass http://127.0.0.1:5601/built_assets/;
        proxy_redirect off;
    }

    location /ui/ {
        proxy_pass http://127.0.0.1:5601/ui/;
        proxy_redirect off;
    }

   location /spaces/ {
        proxy_pass http://127.0.0.1:5601/spaces/;
        proxy_redirect off;
    }

  location /node_modules/ {
        proxy_pass http://127.0.0.1:5601/node_modules/;
        proxy_redirect off;
    }

  location /bootstrap.js {
        proxy_pass http://127.0.0.1:5601/bootstrap.js;
        proxy_redirect off;
    }

 location /internal/ {
        proxy_pass http://127.0.0.1:5601/internal/;
        proxy_redirect off;
    }

 location ~ "^/([\d]{5}/.*)" {
        proxy_pass http://127.0.0.1:5601/\$1;
        proxy_redirect off;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_read_timeout 600;
        proxy_set_header Host \$http_host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_redirect off;
    }

}
EOF

# enable sites
ln -s /etc/nginx/sites-available/selks6.conf /etc/nginx/sites-enabled/selks6.conf

#cd /usr/share/python3/scirius/ && \
#source bin/activate
#python3 bin/manage.py loaddata /etc/scirius/scirius.json
#python3 bin/manage.py addsource "ETOpen Ruleset" https://rules.emergingthreats.net/open/suricata-5.0/emerging.rules.tar.gz http sigs
#python3 bin/manage.py addsource "SSLBL abuse.ch" https://sslbl.abuse.ch/blacklist/sslblacklist_tls_cert.rules http sig
#python3 bin/manage.py addsource "Suricata Traffic ID ruleset" https://raw.githubusercontent.com/jasonish/suricata-trafficid/master/rules/traffic-id.rules http sig
#python3 bin/manage.py defaultruleset "Default SELKS ruleset"
#python3 bin/manage.py addsuricata SELKS "Suricata on SELKS" /etc/suricata/rules "Default SELKS ruleset"
#python3 bin/manage.py updatesuricata
#deactivate

cd /scirius/
python3 manage.py loaddata /etc/scirius/scirius.json
python3 manage.py addsource "ETOpen Ruleset" https://rules.emergingthreats.net/open/suricata-5.0/emerging.rules.tar.gz http sigs
python3 manage.py addsource "SSLBL abuse.ch" https://sslbl.abuse.ch/blacklist/sslblacklist_tls_cert.rules http sig
python3 manage.py addsource "Suricata Traffic ID ruleset" https://raw.githubusercontent.com/jasonish/suricata-trafficid/master/rules/traffic-id.rules http sig
python3 manage.py defaultruleset "Default SELKS ruleset"
python3 manage.py addsuricata SELKS "Suricata on SELKS" /etc/suricata/rules "Default SELKS ruleset"
python3 manage.py updatesuricata

/usr/bin/supervisorctl reread && \
/usr/bin/supervisorctl update && \
/usr/bin/supervisorctl restart scirius && \
/bin/systemctl restart nginx
/bin/systemctl enable supervisor

# set permissions for Scirius 
touch /var/log/scirius.log
touch /var/log/scirius-error.log
chown www-data /var/log/scirius*
chown -R www-data /var/lib/scirius/git-sources/
#chown -R www-data /var/lib/scirius/db/
chown -R www-data.www-data /etc/suricata/rules/

# fix permissions for user www-data/scirius
usermod -a -G logstash www-data
mkdir -p /var/run/suricata/
chmod g+w /var/run/suricata/ -R

### END Scirius, nginx, revrse proxy, supervisor and ssl ###

### START Moloch set up 

mkdir -p /opt/molochtmp
cd /opt/molochtmp/ && \
#apt-get update && \
apt-get install -y libjson-perl libyaml-dev libcrypto++6 libwww-perl
#wget https://files.molo.ch/builds/ubuntu-18.04/moloch_1.8.0-1_amd64.deb
#dpkg -i moloch_1.8.0-1_amd64.deb
#wget https://files.molo.ch/builds/ubuntu-18.04/moloch_2.1.2-1_amd64.deb
#dpkg -i moloch_2.1.2-1_amd64.deb
#wget https://s3.amazonaws.com/files.molo.ch/builds/ubuntu-18.04/moloch_2.7.1-1_amd64.deb
#dpkg -i moloch_2.7.1-1_amd64.deb
dpkg -i /binaries/moloch_2.7.1-1_amd64.deb


cd /opt/
rm /opt/molochtmp -r

# make sure we hold the moloch pkg version unless explicit upgrade is wanted/needed
#apt-mark hold moloch

### END Moloch set up

### START Install RLlib/AI/ML scripts ###
#apt-get install -y software-properties-common
#lspci | grep -i nvidia
#uname -m && cat /etc/*release
#gcc --version
#uname -r
#
#dpkg -i /binaries/cuda-repo-debian10-11-4-local_11.4.2-470.57.02-1_amd64.deb
#apt-key add /var/cuda-repo-debian10-11-4-local/7fa2af80.pub
##apt-key add /var/cuda-repo-debian10-11-4-local_11.4.2-470.57.02-1/7fa2af80.pub
#add-apt-repository contrib
#apt-get update
#apt-get --allow-releaseinfo-change update
#apt-get -y install cuda
#
#
#echo "export PATH=/usr/local/cuda-11.4/bin\${PATH:+:\${PATH}}" >> /root/.bashrc
#echo "export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}" >> /root/.bashrc
#export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}}
#export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64\
#                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
##systemctl status nvidia-persistenced
##systemctl enable nvidia-persistenced
#/usr/bin/nvidia-persistenced --verbose
##cuda-install-samples-11.4.sh /drl
#cat /proc/driver/nvidia/version
##cd /drl
##make
#
#dpkg -i /binaries/libcudnn8_8.2.4.15-1+cuda11.4_amd64.deb
#dpkg -i /binaries/libcudnn8-dev_8.2.4.15-1+cuda11.4_amd64.deb

apt-get install -y g++ python3-dev

python3 -m pip install psutil==5.9.1
python3 -m pip install six==1.16.0 protobuf==3.19.1 scipy==1.6.0 numpy==1.21.4 requests==2.26.0
python3 -m pip install ray==1.11.0 "ray[tune]"==1.11.0 "ray[rllib]"==1.11.0 "ray[default]"==1.11.0 "ray[serve]"==1.11.0
python3 -m pip install pyarrow fsspec tensorflow==2.7.0 aioredis==1.3.1 pandas tqdm gym numba dm-tree
python3 -m pip install scikit-image sklearn keras==2.7.0 typing-extensions==3.7.4.3 gputil starlette uvicorn pydantic
python3 -m pip install mlflow==1.20.2 mlflow-elasticsearchstore mlflow-ray-serve --ignore-installed PyYAML
python3 -m pip install locust --ignore-installed numpy --ignore-installed psutil

#python3 -m pip uninstall protobuf scipy numpy six requests -y
#python3 -m pip uninstall ray ray[tune] ray[rllib] ray[default] ray[serve] -y
#python3 -m pip uninstall pyarrow fsspec tensorflow aioredis pandas tqdm gym numba dm-tree -y
#python3 -m pip uninstall scikit-image sklearn keras typing-extensions gputil starlette uvicorn pydantic -y
#python3 -m pip uninstall mlflow mlflow-elasticsearchstore mlflow-ray-serve -y

#python3 -m pip install PyYAML==6.0 --ignore-installed PyYAML
### END Install RLlib/AI/ML scripts ###

### START Install SELKS/StamusN scripts ###

apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" selks-scripts-stamus

### END Install SELKS/StamusN scripts ###


# Set up a curator old logs removal
# flush everything that is older than 2 weeks

cat >> /opt/selks/delete-old-logs.sh <<EOF
#!/bin/bash

/usr/bin/curator_cli delete-indices --filter_list \
'
[
  {
    "filtertype": "age",
    "source": "creation_date",
    "direction": "older",
    "unit": "days",
    "unit_count": 14
  },
  {
    "filtertype": "pattern",
    "kind": "prefix",
    "value": "logstash*"
  }
]
'
EOF

chmod 755 /opt/selks/delete-old-logs.sh

# Set up a cron jobs for Logstash, Scirius, rule updates
#echo "0 2 * * * www-data ( cd /usr/share/python3/scirius/ && . bin/activate && python3 bin/manage.py updatesuricata && deactivate )" >> /etc/crontab
echo "0 2 * * * www-data ( cd /scirius/ && python3 manage.py updatesuricata )" >> /etc/crontab
echo "0 3 * * * root ( /data/moloch/db/db.pl http://127.0.0.1:9200 expire daily 14 )" >> /etc/crontab
echo "0 4 * * * root /opt/selks/delete-old-logs.sh" >> /etc/crontab
# always leave a empty line before cron files end
echo "" >> /etc/crontab

# Set up the host name
echo "SELKS" > /etc/hostname

# Enable the ssh banners
sed -i -e 's|\#Banner \/etc\/issue\.net|Banner \/etc\/issue\.net|'  /etc/ssh/sshd_config


# Edit the Icon "Install Debian Stretch" name on a Live Desktop 
# to "Install SELKS"
sed -i -e 's|Name\=Install Debian sid|Name\=Install SELKS|'  /usr/share/applications/debian-installer-launcher.desktop 

# Install exception for local certificate
certutil -A -n SELKS -t "P,p,p"  -i /etc/nginx/ssl/scirius.crt  -d /etc/iceweasel/profile/
chmod a+r /etc/iceweasel/profile/*db

#clean up root desktop
rm -f /root/Desktop/* 

apt-get update && \
apt-get install -y linux-headers-amd64

# Clean devel and some others packages
#apt-get -y remove bison  autoconf automake libc6-dev autotools-dev libpcap-dev libnet1-dev libcap-ng-dev \
#	libnetfilter-queue-dev  libnss3-dev libnspr4-dev \
#	xscreensaver xscreensaver-data manpages-dev libjansson-dev \
#	ghostscript xmms2-core x11proto-core-dev linux-libc-dev \
#	rpm alien sane-utils libsane rpm2cpio \
#	libx11-dev libx11-doc m4

apt-get autoremove -y
apt-get clean && \
cat /dev/null > ~/.bash_history && history -c

