#!/usr/sbin/nft -fnn
##### goc la nhu nay !/usr/sbin/nft -f
##### doi thanh      !/usr/sbin/nft -fnn => disable translate port to service name: 80 thanh http


# Hook order is: ingress -> prerouting -> input/output/forward -> postrouting

# Start by flushing all the rules.
flush ruleset

# Defining variables is easy in nftables scripts.

define lan_net = {10.0.2.15/24} # la dia chi mang cua card LAN enp2s0: 10.0.2.15/24 
# => nen lay dia chi ip tu cau hinh - ifconfig - thi tot, ko nen hard code
define lan_address = 10.0.2.15 # dia chi cua card lan enp2s0
define this_firewall = {10.0.2.15, 192.168.1.18} # dia chi cua 2 card mang cua firewall
define wan_net = 192.168.1.18/24 # la dia chi mang cua card WAN
define wan_address = 192.168.1.18 # dia chi ip cua card WAN
define loopback_net = 127.0.0.1/8 # dia chi ipv4 loopback

define wan_net = 192.168.113.0/24
define lan_net = 192.168.179.0/24

# Dinh nghia cac tham so cua luat duoi dang cac bien
# add rule ip ip_filter_table forward tcp dport { http} accept comment "ping imcp tu WAN intface vao LAN net echo request"
# add rule ip ip_filter_table input iif $lan ip saddr $bogons drop comment "Block bogon IPv4 networks from LAN"
# 1) family address: ipv4 hoac ipv6, ipv4 co gia tri la ip; ipv6 co gia tri la ip6 
# (tham so bat buoc)
# Tham so tren trang web tao rule:  TCP/IP Version
# IPv4 => ip ip_filter_table; IPV6 => ip6 ip6_filter_table; ca 2 IPv4+IPv6 thi tao ra 2 luat
# De mac dinh la IPv4, ip
# *family_address = ip => la keyword cua nft => chi duoc dua dang tham so cua code
# Dau sao (*) la tham so bat buoc, chi tao ra tu code chuyen doi tu giao dien web sang lenh nftables,
# tham so dau * khong phai la bien cua nft
# Cu phap luat tao ra den day la:
# add rule *family_address
# 2) table name: co 2 bang: bang 1 la ip_filter_table cho ipv4; bang 2 la ip6_filter_table cho ipv6
# (tham so bat buoc)
# *table_name = ip_filter_table => la keyword cua nft
# Mac dinh la bang cua ipv4: ip_filter_table
# Tham so 2) chi nftable moi co, pf ko co
# Luat tao ra den day la:
# add rule *family_address *table_name
# 3) chain name: co 3 chain la: input, output, forward. Ung 3 direction di vao, ra, xuyen qua firewall
# (tham so bat buoc)
# Tham so tren trang web tao rule:  Direction
# *chain_direction = input => la keyword cua nft
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction
# De dem counter duoc thi phai them keyword counter ngay sau *chain_direction => *chain_direction ^counter
# 4) iif hoac oif, day khong phai la tham so bat buoc, chi dung khi co interface xac dinh trong rule
# (tham so khong bat buoc)
# de mac dinh la iif, la interface cho input => khong dung bien iif duoc vi day la ten cua keyword nft
# interface_parameter = iif  => la keyword cua nft
# tham so 4) nay phai ket hop voi tham so o 5) moi dung cu phap
# 5) Card mang di cung voi tham so $interface_parameter iif: $lan hoac $wan 
# (tham so khong bat buoc)
# neu co tham so 4) moi co tham so 5) nay
# Dau $ (do la) chi tham so nay la bien cua lenh nftables, khong phai keyword cua nft
# hoac $all_interfaces (tuy chon, khong bat buoc)
# Tham so tren trang web tao rule: Interface
# set interface names
define wan = ens33
define lan = ens36
# set interface names
define all_interfaces= {$wan, $lan}
# Cu phap ket hop 4) va 5) la: ^(interface_parameter $lan)
# Dau mu (^) la tham so khong bat buoc, chi tao ra tu code chuyen doi tu giao dien web sang lenh nftables,
# tham so dau ^ khong phai la bien cua nft
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan)
# trong dau dong mo ngoac "()" la 2 tham so tro len ket hop voi nhau moi tao thanh 1 tham so su dung duoc
# 6) Dia chi ip nguon cua goi tin
# (tham so khong bat buoc)
# Tham so tren trang web tao rule: Source
define source_address = {10.0.0.1/8, 192.168.1.0/24}
# Cu phap : ip saddr 10.1.1.1 => ^(family_address saddr $source_address)
# Trong do: *family_address la tham so o 1), saddr la keyword. 
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address)
#
# 7) Giao thuc: tcp, udp, icmp... nhung chi 1 giao thuc, ko phai danh sach
# (tham so khong bat buoc)
# Tham so tren trang web tao rule: Protocol
# protocol_name = tcp 
# Neu giao thuc la tcp, udp thi hien port de chon => phai ket hop voi tham so o 8) hoac 11) source_ports
# hoac destination_ports de tao ra tham so: ^(protocol_name sport $source_ports) hoac ^(protocol_name dport $destination_ports)
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports)
# 7.1) Cac kieu goi tin icmp duoc so sanh, kieu icmp dua vao dang set
define icmp_type = {echo-reply, destination-unreachable,..}
# Neu giao thuc icmp thi hien kieu echo-request, echo-reply, ...
# thi cu phap la protocol= icmp type 
# ket hop voi cac kieu cua: icmp echo-reply, destination-unreachable...
# ^(icmp type $icmp_type)
# icmp type {echo-reply, destination-unreachable, source-quench, redirect, echo-request, time-exceeded, parameter-problem, timestamp-request, timestamp-reply, info-request, info-reply, address-mask-request, address-mask-reply, router-advertisement, router-solicitation}
# add rule $family_address $table_name $chain_direction $interface_parameter $lan $family_address saddr $source_address ^(icmp type $icmp_type) accept
# 7.2) Giao thuc khac, ngoai tcp, udp va icmp
# ospf, bgp, ....
# *ip_protocol_name 
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(ip protocol *ip_protocol_name) ^(family_address daddr destination_address) *action ^(comment "Noi dung can dem counter")

# 8) port nguon, source_port cua giao thuc duoi dang list. chi khi giao thuc la tcp, udp moi la co port, 
# cac giao thuc khac thi khong dung port, ma dung type hoac cu phap rieng khac
# tham so source_ports phai dat sau keyword: giao thuc (tcp/udp) sport, vi du "tcp sport $source_ports"
define source_ports = {80, 81}
# Tham so tren trang web tao rule: Source port range. Chu y: nam o phan Advanced cua Source, phai bam vao moi hien ra
# source_ports la {80, 81} hoac {80-500}
# Cu phap them vao: ^(protocol_name sport $source_ports)
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports)

# 9) Action: drop, accept => keyword cua nft
# Tham so bat buoc
# *action
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports) *action

# 10)  Dia chi ip dich cua goi tin, dang list cho de them bot
# Tham so tren trang web tao rule: Destination 
define destination_address = {10.0.0.1/8, 192.168.1.0/24}
# cu phap la: ip daddr $destination_address => phai co family address o truoc daddr
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports) ^(family_address daddr destination_address) *action

# 11) port dest
# tham so port dest phai dat sau keyword: giao thuc (tcp/udp) dport, vi du tcp dport $destination_ports
define destination_ports = {80, 81}
# Cu phap la: ^(protocol_name dport $destination_ports)
# Luat tao ra den day la:
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports) ^(family_address daddr destination_address) ^(protocol_name dport $destination_ports) *action

# 12) Ghi chu comment de cho phep de dang loc ra cac luat, cac bo dem counter goi tin khop voi luat
# Tham so khong bat buoc
# Tham so tren trang web tao rule: Description
# ^(comment "Noi dung can dem counter")
# Luat tao ra den day la: ******************DAY LA CU PHAP TAO LUAT TONG QUAT***********
#
# Giao thuc TCP, UDP
#
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports) ^(family_address daddr destination_address) ^(protocol_name dport $destination_ports) *action ^(comment "Noi dung can dem counter")
# 
# Giai thich: * la bat buoc, ^ la khong bat buoc, dong mo ngoac () la tham so ket hop cua 2 tham so
#
# Giao thuc ICMP
#
# Chu y voi ^protocol la icmp thi phai cu phap khac la ^(icmp type $icmp_type). Xem rule o cuoi noi dung 7.1)
# 
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(icmp type $icmp_type) ^(family_address daddr destination_address) *action ^(comment "Noi dung can dem counter")
#
# Giao thuc KHAC: OSPF, eigrp, ... ipv4 su dung cu phap khac voi ipv6 khi match cac giao thuc khac
# 
# IPV4 cua giao thuc khac ospf, eigrp: ^(ip protocol *ip_protocol_name)
#
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(ip protocol *ip_protocol_name) ^(family_address daddr destination_address) *action ^(comment "Noi dung can dem counter")
#
# IPV6 cua giao thuc khac ospf, eigrp: ^(ip6 nexthdr *ip_protocol_name)
#
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(ip6 nexthdr *ip_protocol_name) ^(family_address daddr destination_address) *action ^(comment "Noi dung can dem counter")



# set declaration for bogons, sshlockout table
#
# set bogons for table <bogons> persist file "/usr/local/etc/bogons" in pf
define bogons = { 0.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16,192.0.0.0/24, 192.0.2.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4 }
define bogonsv6 = { 2000::/16,2001:1000::/23,2001:100::/24,2001:10::/28,2001:1::/32,2001:20::/27,2001:2::/31,
2001:40::/26,2001:4::/30,2001:4e00::/23,2001:6000::/19,2001:80::/25,2001:8::/29,2001:c000::/18,2001:db8::/32,
2003:4000::/18,2003:8000::/17,2004::/14,2008::/13,2010::/12,2020::/11,2040::/10,2080::/9,2100::/8,2200::/7,
2410::/12,2420::/11,2440::/10,2480::/9,2500::/8,2610:1000::/20,2610:2000::/19,2610:200::/23,2610:4000::/18,
2610:400::/22,2610:8000::/17,2610:800::/21,2611::/16,2612::/15,2614::/14,2618::/13,2620:1000::/20,2620:2000::/19,
2620:200::/23,2620:4000::/18,2620:400::/22,2620:8000::/17,2620:800::/21,2621::/16,2622::/15,2624::/14,2628::/13,
2630::/12,2640::/10,2680::/9,2700::/8,2810::/12,2820::/11,2840::/10,2880::/9,2900::/8,2a10::/12,2a20::/11,
2a40::/10,2a80::/9,2b00::/8,2c10::/12,2c20::/11,2c40::/10,2c80::/9,2d00::/8,2e00::/7,3000::/4,4000::/2,8000::/1,::/3}
# 
#
# table declaration
#
add table ip ip_filter_table
add table ip6 ip6_filter_table

#named set de tao bang sshlockout
add set ip ip_filter_table sshlockout { type ipv4_addr; flags interval; }
# cu phap them cac element vao named set
#add element filter sshlockout {0.0.0.0/8}
#add element filter sshlockout {10.0.0.0/8}
#add element filter sshlockout {41.62.0.0/16}
#add element filter sshlockout {41.67.64.0/20}
# anonymous set, khong dung duoc vi de trong list se bao loi nft
#define sshlockout = {}

#named set de tao bang virusprot
add set ip ip_filter_table virusprot { type ipv4_addr; flags interval; }
add set ip6 ip6_filter_table virusprot_ipv6 { type ipv6_addr; flags interval; }

# them cac chain, chain ten la "input", "forward" va "output"
# IPV4
add chain ip ip_filter_table input { type filter hook input priority 20; policy accept;}
add chain ip ip_filter_table forward { type filter hook forward priority 20; policy accept;}
add chain ip ip_filter_table output { type filter hook output priority 20; policy accept;}
# IPV6
add chain ip6 ip6_filter_table input { type filter hook input priority 30; policy accept;}
add chain ip6 ip6_filter_table forward { type filter hook forward priority 30; policy accept;}
add chain ip6 ip6_filter_table output { type filter hook output priority 30; policy accept;}

# Cho ping tu ngoai vao firewall de kiem tra
# IPV4
# INPUT
add rule ip ip_filter_table input ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept
# OUTPUT
add rule ip ip_filter_table output ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept
# FORWARD 
# luat de test ping va mo http tu may ben kia sang ben nay dang forward
# ****da bo sung "counter" vao ngay sau ten chain "forward" de dem
# add rule ip ip_filter_table forward counter tcp dport { http} accept comment "Allow to forward http to xp xampp web server counter ipv4 forward accept http"
#
#
# khong cho lenh nay la ko ping xuyen qua firewall duoc
# ****da bo sung "counter" vao ngay sau ten chain "forward" de dem
# add rule ip ip_filter_table forward counter ip protocol icmp icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept comment "counter ipv4 forward accept icmp"
#
#

#ket luan: ban dau phai cho ca 2, sau do tat 1 trong 2 roi van duoc,
# tat ca 2 roi cho lai 1 trong 2 cung khong duoc
# => net xoa bang inet_table di => da xoa bang inet_table roi

# HTTP va SSH
# Cac luat ban dau de may tram dieu khien duoc firewall qua http va ssh
# Phai co luat tren ipv4 neu khong co, policy mac dinh cua ipv4 se drop
# IPV4
# INPUT 
add rule ip ip_filter_table input tcp dport { http, https, ssh } accept comment "anti-lockout rule"
add rule ip ip_filter_table input ct state invalid drop comment "Drop invalid connections"
add rule ip ip_filter_table input ct state established,related log prefix "nft.accept input state established, related_" accept comment "Accept traffic originated from us"
# OUTPUT
add rule ip ip_filter_table output ct state invalid drop comment "Drop invalid connections"
add rule ip ip_filter_table output ct state established,related log prefix "nft.accept output state established,related_" accept

# IPV6
# INPUT 
# Phai co luat tren ipv6 neu khong co, policy mac dinh cua ipv6 se drop http va ssh
add rule ip6 ip6_filter_table input tcp dport { http, https, ssh } accept comment "anti-lockout rule"
add rule ip6 ip6_filter_table input ct state invalid drop comment "Drop invalid connections"
add rule ip6 ip6_filter_table input ct state established,related log prefix "nft.accept input state established, related_" accept comment "Accept traffic originated from us"
# OUTPUT
add rule ip6 ip6_filter_table output ct state invalid drop comment "Drop invalid connections"
add rule ip6 ip6_filter_table output ct state established,related log prefix "nft.accept output state established,related_" accept

# Default deny rule cua
#block in inet from {any} to {any} label "8164f82fd0b4f3b0e0c494228a454c17" # Default deny rule
#block in inet6 from {any} to {any} label "8164f82fd0b4f3b0e0c494228a454c17" # Default deny rule
# DAT LAI POLICY DEFAULT LA DROP 
# de default luat la drop khi khong co chi dinh luat cho phep service cu the
# IPV4
# INPUT
add chain ip ip_filter_table input { policy drop;}
add rule ip ip_filter_table input counter comment "counter ipv4 input policy drop"
add rule ip ip_filter_table input log prefix "nft.drop ipv4 input_"
# FORWARD
add chain ip ip_filter_table forward { policy drop;}
add rule ip ip_filter_table forward ct state established,related log prefix "nft.accept forward state established,related_" accept 
add rule ip ip_filter_table forward counter comment "counter ipv4 forward policy drop"
add rule ip ip_filter_table forward log prefix "nft.drop ipv4 forward_"
# OUTPUT
add chain ip ip_filter_table output { policy drop;}
add rule ip ip_filter_table output counter comment "counter ipv4 output policy drop"
add rule ip ip_filter_table output log prefix "nft.drop ipv4 output_"

# IPV6
# INPUT
add chain ip6 ip6_filter_table input { policy drop;}
add rule ip6 ip6_filter_table input counter
add rule ip6 ip6_filter_table input log prefix "nft.drop ipv4 input_"
# FORWARD
add chain ip6 ip6_filter_table forward { policy drop;}
add rule ip6 ip6_filter_table forward ct state established,related log prefix "nft.accept forward state established,related_" accept
add rule ip6 ip6_filter_table forward counter
add rule ip6 ip6_filter_table forward log prefix "nft.drop ipv6 forward_"
# OUTPUT
add chain ip6 ip6_filter_table output { policy drop;}
add rule ip6 ip6_filter_table output counter
add rule ip6 ip6_filter_table output log prefix "nft.drop ipv4 output_"

#Cho phep tat cac goi tin ICMP cua IPv6, co 5 luat mac dinh o pf trong bang Floating
#pass in quick inet6 proto ipv6-icmp from {any} to {any} icmp6-type {1,2,135,136} keep state label "9dff917e83b570f19343d5e2941a545e" # IPv6 requirements (ICMP)
#pass out quick inet6 proto ipv6-icmp from {(self)} to {fe80::/10,ff02::/16} icmp6-type {129,133,134,135,136} keep state label "b026daa4d56d35a3021d47d79578008d" # IPv6 requirements (ICMP)
#pass in quick inet6 proto ipv6-icmp from {fe80::/10} to {fe80::/10,ff02::/16} icmp6-type {128,133,134,135,136} keep state label "d147534c4012c8dd65eda59292c0ab90" # IPv6 requirements (ICMP)
#pass in quick inet6 proto ipv6-icmp from {ff02::/16} to {fe80::/10} icmp6-type {128,133,134,135,136} keep state label "df042096359aa49094a20b3ac111f4b7" # IPv6 requirements (ICMP)
#pass in quick inet6 proto ipv6-icmp from {::} to {ff02::/16} icmp6-type {128,133,134,135,136} keep state label "d8fdc41aeac05a86adfb74e6052317d8" # IPv6 requirements (ICMP)

# IPV6
add rule ip6 ip6_filter_table input icmpv6 type { destination-unreachable, packet-too-big, nd-neighbor-solicit, nd-neighbor-advert} accept
#add rule ip6 ip6_filter_table output ip6 daddr {fe80::/10,ff02::/16} icmpv6 type { echo-reply, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept
add rule ip6 ip6_filter_table output iif $all_interfaces ip6 daddr {fe80::/10,ff02::/16} icmpv6 type { echo-reply, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept
#add rule ip6 ip6_filter_table output oifname {"ens33", "ens36"} ip6 daddr {fe80::/10,ff02::/16} icmpv6 type { echo-reply, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept
add rule ip6 ip6_filter_table input ip6 saddr {fe80::/10} ip6 daddr {fe80::/10,ff02::/16} icmpv6 type { echo-request, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept
add rule ip6 ip6_filter_table input ip6 saddr {ff02::/16} ip6 daddr {fe80::/10} icmpv6 type { echo-request, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept
add rule ip6 ip6_filter_table input ip6 saddr {::} ip6 daddr {ff02::/16} icmpv6 type { echo-request, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert} accept

# block all targetting port 0
# block in quick inet proto {tcp udp} from {any} port {0} to {any} label "055888faf366f8a2c7f1750d10972bd8" # block all targetting port 0
# block in quick inet6 proto {tcp udp} from {any} port {0} to {any} label "055888faf366f8a2c7f1750d10972bd8" # block all targetting port 0
# block in quick inet proto {tcp udp} from {any} to {any} port {0} label "7a8b700e4eb5aee74ba3bb8c84ab144e" # block all targetting port 0
# block in quick inet6 proto {tcp udp} from {any} to {any} port {0} label "7a8b700e4eb5aee74ba3bb8c84ab144e" # block all targetting port 0
# Vi huong block la in nen chain la input, ca 2 loai family address nen la ip va ip6
# IPV4
add rule ip ip_filter_table input tcp sport {0} drop comment "block all targetting port 0"
add rule ip ip_filter_table input udp sport {0} drop comment "block all targetting port 0"
add rule ip ip_filter_table input tcp dport {0} drop comment "block all targetting port 0"
add rule ip ip_filter_table input udp dport {0} drop comment "block all targetting port 0"
# IPV6
add rule ip6 ip6_filter_table input tcp sport {0} drop comment "block all targetting port 0"
add rule ip6 ip6_filter_table input udp sport {0} drop comment "block all targetting port 0"
add rule ip6 ip6_filter_table input tcp dport {0} drop comment "block all targetting port 0"
add rule ip6 ip6_filter_table input udp dport {0} drop comment "block all targetting port 0"

# CARP defaults
#block in quick proto carp from {(self)} to {any} label "e61eb78a7d81ee047de7e0522e86aa7c" # CARP defaults
#pass quick proto carp from {any} to {any} label "2c615f338a7ce8979aef58584d268e0e" # CARP defaults
# IPV4, tuy nhien, IPV6 khong co giao thuc CARP va VRRP
add rule ip ip_filter_table input iif $all_interfaces ip protocol 112 drop comment "CARP defaults"
add rule ip ip_filter_table input ip protocol 112 accept comment "CARP defaults"
add rule ip ip_filter_table output ip protocol 112 accept comment "CARP defaults"

# chuyen doi 2 luat sau cua pf
# sshlockout
#block in quick proto tcp from {<sshlockout>} to {(self)} port {22} label "e4ddd6926820aea1dd5627b7f4af97e7" # sshlockout
#block in quick proto tcp from {<sshlockout>} to {(self)} port {80} label "e01434ee628f9054e449c7dc4ae58447" # sshlockout
# sshlockout
# IPV4
#add rule ip ip_filter_table input iif $all_interfaces ip saddr @sshlockout tcp dport { http, https, ssh } drop comment "sshlockout"
# khong dung iif $all_interfaces van chan cac duong vao http va ssh cua firewall
add rule ip ip_filter_table input ip saddr @sshlockout tcp dport { http, https, ssh } drop comment "sshlockout"

# chan virus co trong bang <virusprot>, cac ip co chua virus
# block in quick from {<virusprot>} to {any} label "ee12eb4ed372a1de1d91c2c2264a6c6d" # virusprot overload table
# IPV4
add rule ip ip_filter_table input ip saddr @virusprot drop comment "virusprot overload table"
# IPV6
add rule ip6 ip6_filter_table input ip6 saddr @virusprot_ipv6 drop comment "virusprot ipv6 overload table"

# chuyen doi 3 luat sau cua pf allow dhcpv6 client in LAN
#pass in quick on em1 proto udp from {fe80::/10} port {546} to {fe80::/10} port {546} label "32f3dc1aafa61a6dd0e74ae1f17955cd" # allow dhcpv6 client in LAN
#pass in quick on em1 proto udp from {any} port {547} to {any} port {546} label "2a80f4b3e62e71c6bc8e5b7db5a49d8a" # allow dhcpv6 client in LAN
#pass out quick on em1 proto udp from {any} port {546} to {any} port {547} label "957d95902984106e2b344773174e0c72" # allow dhcpv6 client in LAN

# allow dhcpv6 client in LAN
#IPV6
add rule ip6 ip6_filter_table input iif $lan ip6 saddr {fe80::/10} udp sport {546} ip6 daddr {fe80::/10} udp dport {546} accept comment "allow dhcpv6 client in LAN"
add rule ip6 ip6_filter_table input iif $lan udp sport {547} udp dport {546} accept comment "allow dhcpv6 client in LAN"
add rule ip6 ip6_filter_table output iif $lan udp sport {546} udp dport {547} accept comment "allow dhcpv6 client in LAN"

# chuyen doi 3 luat sau cua pf allow dhcpv6 client in WAN
#pass in quick on em0 proto udp from {fe80::/10} port {546} to {fe80::/10} port {546} label "608029de78ac13794139ab0c2ae8ad5e" # allow dhcpv6 client in WAN
#pass in quick on em0 proto udp from {any} port {547} to {any} port {546} label "ed93b1efafb9641d0b4795a41bc2f3c1" # allow dhcpv6 client in WAN
#pass out quick on em0 proto udp from {any} port {546} to {any} port {547} label "bc9f8c7d27c536108f14275fb266b6a9" # allow dhcpv6 client in WAN

#allow dhcpv6 client in WAN
add rule ip6 ip6_filter_table input iif $wan ip6 saddr {fe80::/10} udp sport {546} ip6 daddr {fe80::/10} udp dport {546} accept comment "allow dhcpv6 client in WAN"
add rule ip6 ip6_filter_table input iif $wan udp sport {547} udp dport {546} accept comment "allow dhcpv6 client in WAN"
add rule ip6 ip6_filter_table output iif $wan udp sport {546} udp dport {547} accept comment "allow dhcpv6 client in WAN"

#chuyen doi luat bogon lo loopback # Block bogon IPv4 networks from loopback
# block in quick on lo0 inet from {<bogons>} to {any} label "7c31a9cd6ab89ef5031f059a57b4defe" # Block bogon IPv4 networks from loopback
# block in quick on lo0 inet6 from {<bogonsv6>} to {any} label "6cc59413853f35ab92b7f50ae7dde6ac" # Block bogon IPv6 networks from loopback
# block in quick on lo0 inet from {10.0.0.0/8,127.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16} to {any} label "673fe0826134d3181909b9a8c2f47d0b" # Block private networks from loopback
# block in quick on lo0 inet6 from {fc00::/7} to {any} label "daa7543463e9667311e17ca0d9f4744d" # Block private networks from loopback

# Block bogon IPv4 networks from loopback, tuy nhien chua su dung,
# chi khi kich hoat tinh nang o trang  http://192.168.203.129/interfaces.php?if=lan moi bat len
# IPV4
###add rule ip ip_filter_table input iif lo ip saddr $bogons drop comment "Block bogon IPv4 networks from loopback"
# IPV6
###add rule ip6 ip6_filter_table input iif lo ip6 saddr $bogonsv6 drop comment "Block bogon IPv6 networks from loopback"

# chuyen doi luat bogon card lan, tuy nhien chua su dung
# block in quick on em1 inet from {<bogons>} to {any} label "905d384826ec270b160b1b1b666dd136" # Block bogon IPv4 networks from LAN
# block in quick on em1 inet6 from {<bogonsv6>} to {any} label "cc61e8783155f24fe67bf264aa30c78e" # Block bogon IPv6 networks from LAN
# block in quick on em1 inet from {10.0.0.0/8,127.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16} to {any} label "d40be24b1f16c9e68e664ec499e32ad6" # Block private networks from LAN
# block in quick on em1 inet6 from {fc00::/7} to {any} label "188d9eca0cc29bfae8fd6532d6e74952" # Block private networks from LAN
# IPV4
###add rule ip ip_filter_table input iif $lan ip saddr $bogons drop comment "Block bogon IPv4 networks from LAN"
# IPV6
###add rule ip6 ip6_filter_table input iif $lan ip6 saddr $bogonsv6 drop comment "Block bogon IPv6 networks from LAN"

# khong block private net vi mang bca dung private address.

# chuyen doi luat bogon card wan, tuy nhien chua su dung
# block in quick on em0 inet from {<bogons>} to {any} label "71a81a5b9078529d19c7f071d48e01f9" # Block bogon IPv4 networks from WAN
# block in quick on em0 inet6 from {<bogonsv6>} to {any} label "5443fb4ed97a0d6859cbfead1480b7bc" # Block bogon IPv6 networks from WAN
# block in quick on em0 inet from {10.0.0.0/8,127.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16} to {any} label "9f47d98867d94f60b21b0406ea0ca0da" # Block private networks from WAN
# block in quick on em0 inet6 from {fc00::/7} to {any} label "e660702614f543bbc68ff197c03ebce5" # Block private networks from WAN

# Block bogon IPv4 networks from wan, tuy nhien chua su dung,
# chi khi kich hoat tinh nang o trang  http://192.168.203.129/interfaces.php?if=lan moi bat len
# IPV4
###add rule ip ip_filter_table input iif $wan ip saddr $bogons drop comment "Block bogon IPv4 networks from WAN"
# IPV6
###add rule ip6 ip6_filter_table input iif $wan ip6 saddr $bogonsv6 drop comment "Block bogon IPv6 networks from WAN"
# chuyen doi 2 luat allow DHCP client on WAN
#pass in on em0 proto udp from {any} port {67} to {any} port {68} label "46fc10576859cad5bfb072da5f309a9b" # allow DHCP client on WAN
#pass out on em0 proto udp from {any} port {68} to {any} port {67} label "b574198c5a3db74bcd752a5dbecc0430" # allow DHCP client on WAN

# IPV4
add rule ip ip_filter_table input iif $wan udp sport {67} udp dport {68} accept comment "allow DHCP client on WAN"
add rule ip ip_filter_table input iif $wan udp sport {68} udp dport {67} accept comment "allow DHCP client on WAN"

# cho phep loopback any den any
#pass in quick on lo0 from {any} to {any} label "e0d31e3de9e37717b5c3f2e926a737b0" # pass loopback
# IPV4
add rule ip ip_filter_table input iif lo accept comment "pass loopback"
# IPV6
add rule ip6 ip6_filter_table input iif lo accept comment "pass loopback"
# cho phep ban than firewall di ra khap noi
#pass out from {any} to {any} keep state allow-opts label "fcc89aee950e474ad952872fb6c678aa" # let out anything from firewall host itself
# IPV4
add rule ip ip_filter_table output oif $all_interfaces accept comment "let out anything from firewall host itself"
# IPV6
add rule ip6 ip6_filter_table output oif $all_interfaces accept comment "let out anything from firewall host itself"

add rule ip ip_filter_table input tcp dport { https } accept comment "Floating. Cho https ko chon Interface, bat ky huong nao qua firewall"
###############################-CONG THUC-######################################
# TEST luat tao ra theo cong thuc duoi day, da xay dung duoc o tren
# # TCP, UDP
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(protocol_name sport $source_ports) ^(family_address daddr destination_address) ^(protocol_name dport $destination_ports) *action ^(comment "Noi dung can dem counter")
# ICMP
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(family_address daddr destination_address) ^(icmp type $icmp_type) *action ^(comment "Noi dung can dem counter")
## Giao thuc KHAC: OSPF, EIGRP,... 
# add rule *family_address *table_name *chain_direction ^counter ^(interface_parameter $lan) ^(family_address saddr $source_address) ^(ip protocol *ip_protocol_name) ^(family_address daddr destination_address) *action ^(comment "Noi dung can dem counter")
######################################## TEST #################################
# 
# giao thuc tcp, udp
add rule ip ip_filter_table forward counter iif $wan oif $lan tcp dport {81, 443} accept comment "luat tu cong thu cho phep http 2"
add rule ip6 ip6_filter_table forward counter iif $wan oif $lan tcp dport {81, 443} accept comment "luat tu cong thu cho phep http 2"

#
# giao thuc icmp
#
# add rule ip ip_filter_table forward counter iif $wan oif $lan ip saddr {192.168.113.0/24} icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept comment "cho ping icmp forward"
add rule ip ip_filter_table forward counter ip saddr {192.168.113.0/24} icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept comment "cho ping icmp forward"
add rule ip6 ip6_filter_table forward counter ip6 saddr {fc00::/7} icmp type { echo-request, echo-reply, time-exceeded, parameter-problem, destination-unreachable } accept comment "cho ping ip6 icmp forward"
add rule ip6 ip6_filter_table forward counter ip6 saddr {fc00::/7} icmpv6 type { destination-unreachable, packet-too-big, nd-neighbor-solicit, nd-neighbor-advert} accept comment "cho ping ip6 icmpv6 forward"

#
# Giao thuc khac 3 giao thuc thuong dung tcp, udp, icmp: vi du la ospf
#
add rule ip ip_filter_table forward counter ip saddr {192.168.113.0/24} ip protocol {ospf, eigrp, rdp} accept comment "giao thuc ospf"
add rule ip6 ip6_filter_table forward counter ip6 saddr {fc00::/7} ip6 nexthdr {ospf, eigrp, rdp} accept comment "giao thuc ospf"

#
