#!/bin/sh
### BEGIN INIT INFO
# Provides:          squid
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Should-Start:      fam
# Should-Stop:       fam
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the squid proxy daemon service backend.
# Description:       Squid Proxy daemon service backend
### END INIT INFO


# Note:
# Set "squid_enable=yes" in either /etc/rc.conf, /etc/rc.conf.local or
# /etc/rc.conf.d/squid to activate Squid.
#
# Additional variables you can define in one of these files:
#
# squid_chdir:	the directory into which the rc system moves into before
# 		starting Squid. Default: /var/squid
#
# squid_conf:	The configuration file that Squid should use.
#		Default: /etc/squid/squid.conf
#
# squid_fib:	The alternative routing table id that Squid should use.
#		Default: none
#		See setfib(1) for further details. Note that the setfib(2)
#		system call is not available in FreeBSD versions prior to 7.1.
#
# squid_user:	The user id that should be used to run the Squid master
#		process. Default: squid.
#		Note that you probably need to define "squid_user=root" if
#		you want to run Squid in reverse proxy setups or if you want
#		Squid to listen on a "privileged" port < 1024.
#
# squid_pidfile:
#		The name (including the full path) of the Squid
#		master process' PID file.
#		Default: /var/run/squid/squid.pid.
#		You only need to change this if you changed the
#		corresponding entry in your Squid configuration.
#
# squid_flags:	Additional commandline arguments for Squid you might want to
#		use. See squid(8) for further details.
#
# squid_krb5_ktname:
#		Alternative Kerberos 5 Key Table.
#		Default: none
# squid_krb5_config:
#		Alternative Kerberos 5 config file
#		Default: none

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/squid
NAME=squid
DESC="Squid Proxy daemon service backend"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

DAEMON_OPTS=""

#test -x $DAEMON || exit 0

. /lib/lsb/init-functions

name=$NAME
pidfile=$PIDFILE
desc=$DESC

. /etc/rc.subr

set -e

rcvar=squid_enable

# Make sure that we invoke squid with "-f ${squid_conf}"; define this
# variable early so reload_cmd and stop_precmd pick it up:

extra_commands="reload configtest"
reload_cmd=squid_reload
start_precmd=squid_prestart
start_postcmd=squid_getpid
stop_precmd=squid_prestop
configtest_cmd=squid_configtest
reload_precmd=squid_configtest
restart_precmd=squid_configtest


# squid(8) will not start if ${squid_conf} is not present so try
# to catch that beforehand via ${required_files} rather than make
# squid(8) crash.

squid_load_rc_config()
{
	: ${squid_chdir:=/var/squid}
	: ${squid_conf:=/etc/squid/squid.conf}
	: ${squid_enable:=NO}
	: ${squid_program:=/usr/sbin/squid}
	: ${squid_pidfile:=/var/run/squid/squid.pid}
	: ${squid_user:=squid}

	required_args="-f ${squid_conf}"
	required_dirs=$chdir
	required_files=$squid_conf
	command_args="${required_args} ${squid_flags}"
#	We used to need it in squid3 to match pid and proc name
#	procname="?squid-*"
	pidfile=$squid_pidfile
}

squid_prestart()
{
	# setup KRB5_KTNAME:
	squid_krb5_ktname=${squid_krb5_ktname:-"NONE"}
	if [ "${squid_krb5_ktname}" != "NONE" ]; then
		export KRB5_KTNAME=${squid_krb5_ktname}
	fi

	# setup KRB5_CONFIG:
	squid_krb5_config=${squid_krb5_config:-"NONE"}
	if [ "${squid_krb5_config}" != "NONE" ]; then
		export KRB5_CONFIG=${squid_krb5_config}
	fi

	# setup FIB tables:
	if command -v check_namevarlist > /dev/null 2>&1; then
		check_namevarlist fib && return 0
	fi

	${SYSCTL} net.fibs >/dev/null 2>&1 || return 0

	squid_fib=${squid_fib:-"NONE"}
	if [ "${squid_fib}" != "NONE" ]; then
		command="setfib -F $squid_fib $command"
	else
		return 0
	fi

	squid_configtest
}

squid_reload()
{
	$command $required_args $squid_flags -k reconfigure
}

squid_configtest()
{
	echo "Performing sanity check on ${name} configuration."
	if $command $required_args $squid_flags -k check; then
		echo "Configuration for ${name} passes."
		return 0
	else
		return $?
	fi
}

squid_getpid()
{
	# retrieve the PID of the Squid master process explicitly here
	# in case rc.subr was unable to determine it:
	if [ -z "$rc_pid" ]; then
		while ! [ -f ${pidfile} ]; do
			sleep 1
		done
		read _pid _junk <${pidfile}
		[ -z "${_pid}" ] || pid=${_pid}
	else
		pid=${rc_pid}
	fi
}

squid_prestop()
{
	command_args="$command_args -k shutdown"
	squid_configtest
}

check_syntax()
{
    #$DAEMON -tt $DAEMON_OPTS > /dev/null || exit $?
    echo $DAEMON
    echo $DAEMON_OPTS
}

case "$1" in
    start)
        check_syntax
        log_daemon_msg "Starting $DESC" $NAME
        squid_load_rc_config
        squid_prestart
        if ! start-stop-daemon --start --oknodo --quiet \
            --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_OPTS
        then
            log_end_msg 1
        else
            log_end_msg 0
        fi
        ;;
    stop)
        log_daemon_msg "Stopping $DESC" $NAME
        squid_prestop
        if start-stop-daemon --stop --retry 30 --oknodo --quiet \
            --pidfile $PIDFILE --exec $DAEMON
        then
            rm -f $PIDFILE
            log_end_msg 0
        else
            log_end_msg 1
        fi
        ;;
    reload|force-reload)
        check_syntax
        log_daemon_msg "Reloading $DESC configuration" $NAME
        if start-stop-daemon --stop --signal INT --quiet \
            --pidfile $PIDFILE --exec $DAEMON \
            --retry=TERM/60/KILL/5
        then
            rm $PIDFILE
            if start-stop-daemon --start --quiet  \
                --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_OPTS ; then
                log_end_msg 0
            else
                log_end_msg 1
            fi
        else
            log_end_msg 1
        fi
        ;;
    reopen-logs)
        log_daemon_msg "Reopening $DESC logs" $NAME
        if start-stop-daemon --stop --signal HUP --oknodo --quiet \
            --pidfile $PIDFILE --exec $DAEMON
        then
            log_end_msg 0
        else
            log_end_msg 1
        fi
        ;;
    restart)
        check_syntax
        $0 stop
        $0 start
        ;;
    configtest|testconfig)
        check_syntax
        ;;
    status)
        status_of_proc -p "$PIDFILE" "$DAEMON" squid && exit 0 || exit $?
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|reopen-logs|configtest|status}" >&2
        exit 1
        ;;
esac

exit 0
