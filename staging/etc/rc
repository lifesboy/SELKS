#!/bin/sh

# Copyright (c) 2014-2019 Franco Fichtner <franco@opnsense.org>
# Copyright (c) 2004-2010 Scott Ullrich <sullrich@gmail.com>
# Copyright (c) 2003-2004 Manuel Kasper <mk@neon1.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Boot interrupted'; exit 1" 3

HOME=/
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
export HOME PATH

echo "Mounting filesystems..."

# tunefs may refuse otherwise
mount -fr / 2> /dev/null

echo "$(date)" >> /rclog.txt

GROWFS_MARKER=/.probe.for.growfs.nano
ROOT_IS_UFS=

while read FS_PART FS_MNT FS_TYPE FS_MORE; do
	# only tune our own file systems
	if [ "${FS_TYPE}" != "ufs" ]; then
		continue;
	fi

	# marker for running fsck in a bit
	if [ "${FS_MNT}" = "/" ]; then
		ROOT_IS_UFS=yes
	fi

	if echo "${FS_MORE}" | grep -iq nosoft; then
		# appending "# nosoft" to the /etc/fstab entry
		# will allow to strip trim and leave it disabled
		tunefs -n disable ${FS_MNT}
	else
		# enables soft updates
		tunefs -n enable ${FS_MNT}
	fi

	FS_DEV=$(echo ${FS_PART} | awk 'match($0, /^\/dev\/(gpt|ufs)\/.+$/) { print substr( $0, RSTART + 5, RLENGTH - 5 )}')
	if [ -n "${FS_DEV}" ]; then
		FS_DEV=$(glabel status -as | grep ${FS_DEV} | awk 'match($3, /^[a-z]+[0-9]+/) { print substr( $3, RSTART, RLENGTH )}')
		if [ "${FS_MNT}" = "/" -a -f ${GROWFS_MARKER} ]; then
			# hammertime!
			gpart recover ${FS_DEV}
			gpart resize -i 1 ${FS_DEV}
			growfs -y ${FS_MNT}
		fi
	fi
	if [ -z "${FS_DEV}" ]; then
		FS_DEV=$(echo ${FS_PART} | awk 'match($0, /^\/dev\/[a-z]+[0-9]+/) { print substr( $0, RSTART + 5, RLENGTH - 5 )}')
	fi
	if [ -n "${FS_DEV}" ]; then
		FS_TRIM=$(camcontrol identify ${FS_DEV} | grep TRIM | awk '{ print $5; }')
		if [ "${FS_TRIM}" = "yes" ]; then
			if echo "${FS_MORE}" | grep -iq notrim; then
				# appending "# notrim" to the /etc/fstab entry
				# will allow to strip trim and leave it disabled
				tunefs -t disable ${FS_MNT}
			else
				# enables TRIM
				tunefs -t enable ${FS_MNT}
			fi
		fi
	fi
done < /etc/fstab

#mount cic data for AI/ML
lsblk -fs >> /rclog.txt
CIC_DEV=$(lsblk | awk 'match($0, /sda .+$/) { print "/dev/sda" }')
if [ -n "${CIC_DEV}" ]; then
  CIC_DEV_FS=$(lsblk "${CIC_DEV}" -no FSTYPE)
  if [ "${CIC_DEV_FS}" != 'ext4' ]; then
    no | mkfs.ext4 /dev/sda
  fi
  mkdir -p /cic

  CIC_UUID=$(lsblk "${CIC_DEV}" -no UUID)
  CIC_FSTAB=$(fgrep "${CIC_UUID}" /etc/fstab)
  if [ -z "${CIC_FSTAB}" ]; then
    echo "UUID=${CIC_UUID} /cic            ext4    errors=remount-ro 0       1" >> /etc/fstab;
    #mount -t ext4 ${CIC_DEV} /cic
  fi
fi

lsblk -fs >> /rclog.txt
DRL_DEV=$(lsblk | awk 'match($0, /sdb .+$/) { print "/dev/sdb" }')
if [ -n "${DRL_DEV}" ]; then
  DRL_DEV_FS=$(lsblk "${DRL_DEV}" -no FSTYPE)
  if [ "${DRL_DEV_FS}" != 'ext4' ]; then
    no | mkfs.ext4 /dev/sdb
  fi
  mkdir -p /drl

  DRL_UUID=$(lsblk "${DRL_DEV}" -no UUID)
  DRL_FSTAB=$(fgrep "${DRL_UUID}" /etc/fstab)
  if [ -z "${DRL_FSTAB}" ]; then
    echo "UUID=${DRL_UUID} /drl            ext4    errors=remount-ro 0       1" >> /etc/fstab;
    #mount -t ext4 ${DRL_DEV} /drl
  fi

  mkdir -p /drl/ray_results
  if [ ! -d /root/ray_results ]; then
    ln -s /drl/ray_results /root/ray_results
  fi
fi
lsblk -fs >> /rclog.txt
cat /etc/mtab >> /rclog.txt
#end mount cic data for AI/ML

attempts=0
while [ ${attempts} -lt 3 ]; do
	if [ -n "${ROOT_IS_UFS}" ]; then
		# fsck_ffs is required to be run twice
		# in order to mark the system "clean"
		fsck -C -y / || fsck -C -y /
	fi
	if mount -a; then
		# bail if all is well
		break
	fi
	attempts=$((attempts+1))
done

if lsmod | grep -q "^zfs "; then
	mount -w /
	zfs mount -va
	# maybe there is a mountpoint in fstab
	# that requires ZFS to be fully set up
	mount -a
fi

# clear growfs marker now that we are read/write
rm -f ${GROWFS_MARKER}

# see if / is writable (aka. non-LiveCD boot)
if _tmpdir=$(mktemp -d -q /.diskless.XXXXXX); then
	# only remove the directory
	rmdir ${_tmpdir}
else
	# fake a writeable environment in some subdirs
	for i in boot conf etc home root usr var; do
		mkdir -p /tmp/.cdrom/${i}
		mount_unionfs /tmp/.cdrom/${i} /${i}
	done
fi

#Init backup dataset
mkdir -p /cic/dataset/log
mkdir -p /cic/dataset/log/suricata/
mkdir -p /cic/dataset/log/squid/
mkdir -p /cic/dataset/log/syslog/
mkdir -p /cic/dataset/log/kern/
mkdir -p /cic/dataset/nsm/
chown logstash -R /cic/dataset/nsm/

#Init backup opnsense conf
mkdir -p /drl/opnsense/conf/backup
rm -rf /conf/backup.bak
mv /conf/backup /conf/backup.bak
ln -s /drl/opnsense/conf/backup /conf/backup

#Init backup elk
mkdir -p /drl/elasticsearch
chown -R elasticsearch:elasticsearch /drl/elasticsearch
mkdir -p /drl/tmp
chmod 1777 /drl/tmp

#Init backup postgres
mkdir -p /drl/postgresql/11/main
if [ -z "$(ls -A /drl/postgresql/11/main)" ]; then
  cp -R /var/lib/postgresql/11/main/* /drl/postgresql/11/main
  chown -R postgres:postgres /drl/postgresql
  chmod -R 0750 /drl/postgresql
  sed -i -E "s/data_directory = .*/data_directory = '\/drl\/postgresql\/11\/main'/g" /etc/postgresql/11/main/postgresql.conf
  pg_ctlcluster 11 main restart -f -- -l /var/log/postgresql/postgresql-11-main.log
fi
chown -R postgres:postgres /drl/postgresql
chmod -R 0750 /drl/postgresql
sed -i -E "s/data_directory = .*/data_directory = '\/drl\/postgresql\/11\/main'/g" /etc/postgresql/11/main/postgresql.conf

# regenerate groups and users for base
chmod 755 /usr/local/etc/rc.subr.d/recover
/usr/local/etc/rc.subr.d/recover base > /dev/null

# generate hostid and save it permanently
/etc/init.d/hostid start
#/etc/rc.d/hostid_save start

# set keyboard map if needed
#/etc/rc.d/syscons onestart

# run the config importer during early startup
/usr/local/sbin/opnsense-importer -b

# enable console output if it was muted
#/sbin/conscontrol mute off > /dev/null
#/bin/dmesg -D

# all sorts of maintenance tasks for /var
/usr/local/etc/rc.subr.d/var

#ln -s /run /var/run
chmod 0755 /var/run

chown -R root:crontab /var/spool/cron/crontabs
chmod -R 0600 /var/spool/cron/crontabs

chmod -R o+r /var/log/nginx
chmod -R o+r /var/log/squid
chmod -R o+r /var/log/clamav
chmod -R o+r /var/log/boot.log
chmod -R o+r /var/log/ray
chmod -R o+r /var/log/scirius
chmod -R o+r /var/log/scirius*
chmod -R o+r /var/log/logstash
chmod -R o+r /var/log/elasticsearch
chmod -R o+r /var/log/tensorboard
chmod -R o+r /var/log/suricata/suricata.log
chmod -R o+r /var/log/suricata/suricata-start.log
chmod -R o+r /var/log/syslog

chmod 0755 /var/log/nginx
chmod 0755 /var/log/squid
chmod 0755 /var/log/clamav
chmod 0755 /var/log/ray
chmod 0755 /var/log/scirius
chmod 0755 /var/log/logstash
chmod 0755 /var/log/elasticsearch
chmod 0755 /var/log/tensorboard
chmod 0755 /var/log/suricata
chmod 0755 /usr/local/etc/rc.sshd
chmod 0755 /usr/local/etc/rc.*

logrotate -f /etc/logrotate.d/*

# write /var/run/dmesg.boot
/etc/rc.d/dmesg onestart

# all sorts of maintenance tasks for /tmp
/usr/local/etc/rc.subr.d/tmp

# set up and recover a crash dump before activating swap
/usr/local/etc/rc.subr.d/crashdump
/usr/local/etc/rc.subr.d/swapon

echo -n "."
/sbin/ldconfig /usr/lib /usr/local/lib /lib
/etc/rc.d/ldconfig start 2> /dev/null

# Launching kbdmux(4)
if [ -f "/dev/kbdmux0" ]; then
	echo -n "."
	/usr/sbin/kbdcontrol -k /dev/kbdmux0 < /dev/console
	[ -c "/dev/atkbd0" ] && kbdcontrol -a atkbd0 < /dev/console
	[ -c "/dev/ukbd0" ] && kbdcontrol -a ukbd0 < /dev/console
fi

echo "done."

# Regenerate groups and users for packages
/usr/local/etc/rc.subr.d/recover pkg > /dev/null 2> /dev/null

# Recreate capabilities DB
#/usr/bin/cap_mkdb /etc/login.conf

# Execute the early syshook / plugin commands
/usr/local/etc/rc.syshook early

#patch to fix missing /var/run/configd.pid when starting on boot up
service configd restart

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!! PHP starts working here, not earlier !!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Let the PHP-based configuration subsystem set up the system now
echo -n "Launching the init system..."
touch /var/run/booting
/usr/local/etc/rc.bootup || exit 1
rm /var/run/booting

# Execute the normal syshook / plugin commands
/usr/local/etc/rc.syshook start

echo -n "Root file system: "
mount | grep ' on / ' | awk '{ print $1 }'
date

#fix CUDA conflict with nouveau driver for Nvidia GPU
echo blacklist nouveau > /etc/modprobe.d/blacklist-nvidia-nouveau.conf

#fist time setup base on CUDA installation
#if [ ! -e "/usr/local/cuda-11.4/lib64" ]; then
#  echo "Run first time setup (y: default after 5s, n: cancel)?: "
#  read -t 5 -n 1 answer
#  if [ $answer == 'n' ]; then
#      echo "Cancel first time setup!"
#  else
#      /usr/bin/selks-first-time-setup_cuda
#      /usr/bin/selks-first-time-setup_stamus
#  fi
#fi
#end first time setup

#/usr/local/sbin/opnsense-shell banner
#/usr/local/etc/rc.subr.d/livemode

lsblk -fs >> /rclog.txt
cat /etc/mtab >> /rclog.txt

exit 0
